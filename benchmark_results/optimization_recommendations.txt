PERFORMANCE OPTIMIZATION RECOMMENDATIONS
=====================================

Functions ranked by execution time (slowest first):

1. extract_properties
   Average time: 0.000464 seconds
   Maximum time: 0.001108 seconds
   Tested on 4 datasets

2. validate_smiles
   Average time: 0.000271 seconds
   Maximum time: 0.001037 seconds
   Tested on 3 datasets

3. calculate_efficiency_metrics
   Average time: 0.000000 seconds
   Maximum time: 0.000000 seconds
   Tested on 3 datasets


RECOMMENDATIONS FOR C++ CONVERSION:
===============================

Consider converting these functions to C++:

1. extract_properties
   Reason: This function takes 0.000464 seconds on average
   Note: This function involves heavy RDKit calculations which would benefit
         significantly from C++ implementation.

2. validate_smiles
   Reason: This function takes 0.000271 seconds on average
   Note: SMILES validation could be much faster in C++ and is called frequently.

3. calculate_efficiency_metrics
   Reason: This function takes 0.000000 seconds on average
   Note: This math-heavy function would be faster in C++.


ADDITIONAL INSIGHTS FROM PROFILING:
================================

Based on detailed profiling, these specific functions show high cumulative time:

- batch_fetch_activities: See detailed analysis in cprofile_batch_fetch_activities.txt
- calculate_efficiency_metrics: See detailed analysis in cprofile_calculate_efficiency_metrics.txt
- extract_properties: See detailed analysis in cprofile_extract_properties.txt

Functions with high memory usage that might benefit from C++ optimization:

- test_fetch_and_calculate: Memory usage details in memory_trace_test_fetch_and_calculate.txt
- test_get_chembl_ids: Memory usage details in memory_trace_test_get_chembl_ids.txt
